<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on 骚铭科技的博客（建设中）</title>
    <link>http://yunyu-mr.github.io/tags/cpp/</link>
    <description>Recent content in Cpp on 骚铭科技的博客（建设中）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yourname@example.com (骚铭)</managingEditor>
    <webMaster>yourname@example.com (骚铭)</webMaster>
    <copyright>&lt;i class=&#39;fa fa-copyright&#39;&gt;&lt;/i&gt; 2016 &lt;i class=&#39;fa fa-mars&#39;&gt;&lt;/i&gt;骚铭科技 SM-Tech!</copyright>
    <lastBuildDate>Sat, 09 Jul 2016 16:37:09 +0800</lastBuildDate>
    <atom:link href="http://yunyu-mr.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>namespace 的使用</title>
      <link>http://yunyu-mr.github.io/2016/07/09/namespace-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 09 Jul 2016 16:37:09 +0800</pubDate>
      <author>yourname@example.com (骚铭)</author>
      <guid>http://yunyu-mr.github.io/2016/07/09/namespace-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;p&gt;最近在看libzmq的源码，里面大量使用namespace。平时没怎么用过，故写一段测试代码作为笔记。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我抽象了一个客厅类 &lt;code&gt;living_room_t&lt;/code&gt;，里面有&lt;code&gt;chair_t&lt;/code&gt; 和 &lt;code&gt;desk_t&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;cmakelists&#34;&gt;CMakeLists&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.3)
project(namespace_test)

set(SOURCE_FILES
main.cpp
living_room.hpp
living_room.cpp
chair.hpp
chair.cpp
desk.hpp
desk.cpp)

add_executable(home ${SOURCE_FILES})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;源码&#34;&gt;源码&lt;/h3&gt;

&lt;p&gt;我使用的命名空间是&lt;code&gt;home&lt;/code&gt;。&lt;code&gt;living_room_t&lt;/code&gt;，&lt;code&gt;chair_t&lt;/code&gt;和&lt;code&gt;desk_t&lt;/code&gt;都属于同一个域*home*，但是属于不同的文件。有了共同的命名空间*home*，在&lt;code&gt;living_room.hpp&lt;/code&gt;里头是不需要include &lt;code&gt;chair.hpp&lt;/code&gt; 和 &lt;code&gt;desk.hpp&lt;/code&gt; 的。不过，在&lt;code&gt;living_room.cpp&lt;/code&gt;中是需要include &lt;code&gt;chair.hpp&lt;/code&gt; 和 &lt;code&gt;desk.hpp&lt;/code&gt;的。否则编译器就会报&amp;raquo;allocation of incomplete type&amp;raquo;的错误。&lt;/p&gt;

&lt;p&gt;注意到在living_room.hpp里面有两个类声明&lt;code&gt;class chair_t;&lt;/code&gt;和&lt;code&gt;class desk_t;&lt;/code&gt;，这样做的好处是后面的使用中不需要写&lt;code&gt;home::chair_t *chair;&lt;/code&gt;，只需&lt;code&gt;chair_t *chair;&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;好了，Talk is cheap, show me the code.&lt;/p&gt;

&lt;p&gt;头文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// living_room.hpp

namespace home
{
    class chair_t;
    class desk_t;
    
    class living_room_t
    {
        int id;
        int size;
        chair_t *chair;
        desk_t *desk;
        
    public:
        living_room_t(int id, int size = 10);            
        ~living_room_t();
        void prints();
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// chair.hpp
namespace home 
{ 
    class chair_t 
    {
        int id;
            
    public:
        chair_t(int id):
            id(id) 
        {}
        ~chair_t() {}
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// desk.hpp
namespace home
{
    class desk_t
    {
        int id;
    public:
        desk_t(int id):
            id(id)
        {}
        ~desk_t() {}
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;living_room的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// living_room.cpp
#include &amp;lt;iostream&amp;gt;
#include &amp;quot;living_room.hpp&amp;quot;
#include &amp;quot;chair.hpp&amp;quot;
#include &amp;quot;desk.hpp&amp;quot;

home::living_room_t::living_room_t (int id, int size):
    id(id),
    size(size) 
{
    chair = new chair_t (1);
    desk = new desk_t (2);
}

home::living_room_t::~living_room_t() {
    delete chair;
    delete desk;
}

void home::living_room_t::prints()
{
    using namespace std;
    cout &amp;lt;&amp;lt; &amp;quot;This is living room &amp;quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，主函数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;quot;living_room.hpp&amp;quot;

int main() {
    home::living_room_t living(1);
    living.prints();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>